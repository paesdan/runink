<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Runink: Distributed Pipeline Platform on Runink</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Runink: Distributed Pipeline Platform on Runink</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/docs/architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/architecture/</guid>
      <description>&lt;h1 id=&#34;runink-architecture-golinux-native-distributed-data-environment&#34;&gt;Runink Architecture: Go/Linux Native Distributed Data Environment&lt;/h1&gt;&#xA;&lt;p&gt;Goal: Define a self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives. This system acts as the cluster resource manager and scheduler (replacing Slurm), provides Kubernetes-like logical isolation and RBAC, integrates data governance features, and ensures robust security and observability. It aims for high efficiency by avoiding traditional virtualization or container runtimes like Docker. Define a self-sufficient, distributed environment for orchestrating and executing data pipelines using Go and Linux primitives, with enhanced metadata capabilities designed to support standard data governance (lineage, catalog) AND future integration of LLM-generated annotations.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/benchmark/</guid>
      <description>&lt;h1 id=&#34;-runink-vs-competitors-raft-powered-benchmark&#34;&gt;üìä Runink vs. Competitors: Raft-Powered Benchmark&lt;/h1&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-architecture--paradigm&#34;&gt;1. Architecture &amp;amp; Paradigm&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Runink:&lt;/strong&gt; A Go/Linux-native, vertically integrated data platform that combines execution, scheduling, governance, and observability in a single runtime. Unlike traditional stacks, Runink does not rely on Kubernetes or external orchestrators. Instead, it uses a &lt;strong&gt;Raft-based control plane&lt;/strong&gt; to ensure high availability and consensus across services like scheduling, metadata, and security ‚Äî forming a distributed operating model purpose-built for data.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Competitors:&lt;/strong&gt; Use a layered, loosely coupled stack:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/cli/</guid>
      <description>&lt;h1 id=&#34;-runink-cli-reference-runi&#34;&gt;üß∞ Runink CLI Reference (&lt;code&gt;runi&lt;/code&gt;)&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;runi&lt;/code&gt; CLI is the command-line interface to everything in the &lt;strong&gt;Runink&lt;/strong&gt; data platform. It‚Äôs your developer-first companion for defining, testing, running, securing, and publishing data pipelines ‚Äî all from declarative &lt;code&gt;.dsl&lt;/code&gt; files and Go-native contracts.&lt;/p&gt;&#xA;&lt;p&gt;This reference describes all available commands, grouped by capability.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-project--pipeline-lifecycle&#34;&gt;üß± Project &amp;amp; Pipeline Lifecycle&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi init [project-name]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Scaffold a new workspace with starter contracts, features, CI config&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi compile --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate Go pipeline code from &lt;code&gt;.dsl&lt;/code&gt; files&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi run --scenario &amp;lt;file&amp;gt; --contract &amp;lt;contract.json&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run pipelines locally or remotely&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi watch --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Auto-compile &amp;amp; re-run scenario on save&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-schema--contract-management&#34;&gt;üìë Schema &amp;amp; Contract Management&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi contract gen --struct &amp;lt;pkg.Type&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate a contract from Go struct&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi contract diff --old v1.json --new v2.json&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Show schema drift between versions&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi contract rollback&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Revert to previous contract version&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi contract history --name &amp;lt;contract&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Show all versions and changelog entries&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-testing--data-validation&#34;&gt;üß™ Testing &amp;amp; Data Validation&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi test --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run tests using golden files&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi synth --contract &amp;lt;contract.json&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate synthetic golden test data&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi verify-contract --contract &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Validate pipeline against contract&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-security-publishing--compliance&#34;&gt;üîê Security, Publishing &amp;amp; Compliance&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;`runi secure [&amp;ndash;sbom&lt;/td&gt;&#xA;          &lt;td&gt;&amp;ndash;sign&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi publish&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Push metadata, lineage, and contracts to registry&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi sbom export [--format spdx]&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Export SPDX-compliant software bill of materials&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi changelog gen&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate changelogs from contract/feature diffs&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-observability--lineage&#34;&gt;üîç Observability &amp;amp; Lineage&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi lineage --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Show DAG lineage for a run&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi lineage track --source A --sink B&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Manually link lineage metadata&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi metadata get --key &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Retrieve stored metadata for a step&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi metadata annotate --key &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Attach annotation to pipeline metadata&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi logs --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;View logs for a specific run&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi status --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Check status of a pipeline execution&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-distributed-execution-remote&#34;&gt;ü§ñ Distributed Execution (Remote)&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;`runi deploy &amp;ndash;target &amp;lt;k8s&lt;/td&gt;&#xA;          &lt;td&gt;bigmachine&amp;gt;`&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi start --slice &amp;lt;file&amp;gt; --herd &amp;lt;namespace&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Start execution of a scenario remotely&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi kill --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Terminate running scenario&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-introspection--visualization&#34;&gt;üîÑ Introspection &amp;amp; Visualization&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi explain --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Describe DAG and step resolution logic&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi graphviz --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Render DAG as a .png, .svg, or .dot&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi diff --feature old.dsl --feature new.dsl&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Compare feature files and show logic drift&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-repl--exploratory-commands&#34;&gt;üß™ REPL &amp;amp; Exploratory Commands&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi repl&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Launch interactive DataFrame, SQL, JSON REPL&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi json explore -f file.json -q &#39;.email&#39;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run jq-style query on JSON&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi query -e &amp;quot;SELECT * FROM dataset&amp;quot;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run SQL-like query on scenario input&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-dev-tools--generators&#34;&gt;üß∞ Dev Tools &amp;amp; Generators&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi gen --dsl input.json&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate feature from sample input&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi contract from-feature &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Extract contract from &lt;code&gt;.dsl&lt;/code&gt; spec&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi schema hash&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate contract fingerprint&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi bump&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Auto-increment contract version with changelog&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-plugins--extensions&#34;&gt;üß© Plugins &amp;amp; Extensions&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi plugin install &amp;lt;url&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Install external plugin&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi plugin list&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;List installed extensions&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi plugin run &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Execute a plugin subcommand&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-packaging--cicd&#34;&gt;üì¶ Packaging &amp;amp; CI/CD&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi build&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Compile pipeline bundle for remote use&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi pack&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Zip workspace for deployment/distribution&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi upgrade&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Self-update the CLI and plugins&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi doctor&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Diagnose CLI and project setup&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-runtime-lifecycle&#34;&gt;üîÑ Runtime Lifecycle&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi restart --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Restart a pipeline from last successful checkpoint&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi resume --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Resume paused pipeline without reprocessing&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi checkpoint --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Create a persistent step-based checkpoint marker&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-collaboration--governance&#34;&gt;üí¨ Collaboration &amp;amp; Governance&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi comment --contract &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Leave inline comments for review (contract-level QA)&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi request-approval --contract &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Submit contract for governance approval&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi feedback --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Attach review notes to a scenario&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-privacy-redaction--data-escrow&#34;&gt;üõ°Ô∏è Privacy, Redaction &amp;amp; Data Escrow&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi redact --contract &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Automatically redact PII based on tags&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi escrow --run-id &amp;lt;uuid&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Encrypt pipeline outputs for future unsealing&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi anonymize --input &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Generate synthetic version of a sensitive input file&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-event-based-execution&#34;&gt;üìÖ Event-Based Execution&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;`runi trigger &amp;ndash;on &amp;lt;webhook&lt;/td&gt;&#xA;          &lt;td&gt;s3&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi listen --event &amp;lt;type&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Listen for external event to start scenario&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi subscribe --stream &amp;lt;source&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Subscribe to stream source with offset recovery&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-pipeline--contract-lifecycle&#34;&gt;üîÉ Pipeline &amp;amp; Contract Lifecycle&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi freeze --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Lock DAG hash and contract state as immutable&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi archive --herd &amp;lt;name&amp;gt; --keep &amp;lt;N&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Archive old scenarios/runs beyond retention policy&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi retire --contract &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Deprecate contract from active use&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-metadata-graph--semantic-search&#34;&gt;üß† Metadata Graph &amp;amp; Semantic Search&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi lineage graph --out file.dot&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Export lineage graph in DOT format&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi knowledge export --format turtle&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Export contract and DAG metadata as RDF&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi query lineage&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run SQL-style queries across lineage metadata&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-experimental--llm-integrated&#34;&gt;üß™ Experimental / LLM-integrated&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Command&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi openai audit --contract &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Use LLM to summarize or describe schema changes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi sandbox --scenario &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run pipeline in ephemeral namespace sandbox&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi simulate --input &amp;lt;file&amp;gt; --window 5m&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Replay stream input over a time window&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;runi mint-token --role &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Mint temporary JWT token scoped to herd/contract&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;üí¨ Use &lt;code&gt;runi &amp;lt;command&amp;gt; --help&lt;/code&gt; for flags, options, and examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/clihelp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/clihelp/</guid>
      <description>&lt;h1 id=&#34;-runink-cli-help-template&#34;&gt;üÜò Runink CLI: Help Template&lt;/h1&gt;&#xA;&lt;p&gt;This is a developer-friendly help template for implementing consistent &lt;code&gt;runi &amp;lt;command&amp;gt; --help&lt;/code&gt; outputs.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-format-basic-help-command&#34;&gt;üß± Format: Basic Help Command&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;runi &amp;lt;command&amp;gt; [subcommand] [flags]&#xA;&#xA;Usage:&#xA;  runi &amp;lt;command&amp;gt; [options]&#xA;&#xA;Options:&#xA;  -h, --help       Show this help message and exit&#xA;  -v, --verbose    Show detailed logs and diagnostics&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;example-runi-init---help&#34;&gt;Example: &lt;code&gt;runi init --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Initialize a new Runink project.&#xA;&#xA;Usage:&#xA;  runi init [project-name]&#xA;&#xA;Flags:&#xA;  -h, --help     Show help for init&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-example-runi-compile---help&#34;&gt;üîÑ Example: &lt;code&gt;runi compile --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;runi compile --scenario &amp;lt;file.dsl&amp;gt;&#xA;&#xA;Description:&#xA;  Compile a `.dsl` scenario and its contract into an executable Go DAG.&#xA;  Generates a Go file under `rendered/` based on contract-linked step tags.&#xA;&#xA;Usage:&#xA;  runi compile --scenario features/trade_cdm.dsl&#xA;&#xA;Flags:&#xA;  --scenario    Path to a DSL scenario file&#xA;  --out         Optional: custom output path for DAG (default: rendered/&amp;lt;name&amp;gt;.go)&#xA;  --dry-run     Only validate scenario and contract, do not write DAG&#xA;  --verbose     Show full DAG step resolution logs&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-example-runi-test---help&#34;&gt;üß™ Example: &lt;code&gt;runi test --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;runi test --scenario &amp;lt;file.dsl&amp;gt;&#xA;&#xA;Description:&#xA;  Execute a feature scenario with golden test inputs and compare output.&#xA;  Supports diff mode and golden update flows.&#xA;&#xA;Usage:&#xA;  runi test --scenario features/onboard.dsl&#xA;&#xA;Flags:&#xA;  --scenario       DSL file to test&#xA;  --golden         Optional: override path to golden test folder&#xA;  --update         Automatically update golden output on success&#xA;  --only &amp;lt;step&amp;gt;    Run test up to a specific pipeline step&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-example-runi-contract-gen---help&#34;&gt;üîê Example: &lt;code&gt;runi contract gen --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;runi contract gen --struct &amp;lt;package.Type&amp;gt; --out &amp;lt;file&amp;gt;&#xA;&#xA;Description:&#xA;  Generate a JSON contract definition from a Go struct. Includes schema, access tags, and validation metadata.&#xA;&#xA;Usage:&#xA;  runi contract gen --struct contracts.Customer --out contracts/customer.json&#xA;&#xA;Flags:&#xA;  --struct     Fully qualified Go type (e.g. contracts.Customer)&#xA;  --out        Output contract file path&#xA;  --flatten    Inline nested types into flat fields&#xA;  --herd       Optional: attach to specific herd (e.g. finance)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-contract-diff---help&#34;&gt;&lt;code&gt;runi contract diff --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Diff two versions of a contract and show schema drift.&#xA;&#xA;Usage:&#xA;  runi contract diff --old v1.json --new v2.json&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-run---help&#34;&gt;&lt;code&gt;runi run --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Run a compiled pipeline with data inputs.&#xA;&#xA;Usage:&#xA;  runi run --scenario &amp;lt;file.dsl&amp;gt; [--contract file] [--herd name]&#xA;&#xA;Flags:&#xA;  --scenario     Scenario to execute&#xA;  --contract     Optional explicit contract&#xA;  --herd         Herd to run pipeline in&#xA;  --dry-run      Preview DAG resolution only&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-lineage---help&#34;&gt;&lt;code&gt;runi lineage --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Show lineage metadata for a run.&#xA;&#xA;Usage:&#xA;  runi lineage --run-id &amp;lt;id&amp;gt;&#xA;&#xA;Flags:&#xA;  --run-id       Unique run identifier&#xA;  --output       Format (json|csv|graph)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-publish---help&#34;&gt;&lt;code&gt;runi publish --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Publish contracts, lineage, and tags to metadata registry.&#xA;&#xA;Usage:&#xA;  runi publish --herd &amp;lt;name&amp;gt; [--scenario file]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-repl---help&#34;&gt;&lt;code&gt;runi repl --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Start interactive REPL for querying test inputs or contract data.&#xA;&#xA;Usage:&#xA;  runi repl --scenario &amp;lt;path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-example-runi-deploy---help&#34;&gt;ü§ñ Example: &lt;code&gt;runi deploy --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;runi deploy --target &amp;lt;target&amp;gt;&#xA;&#xA;Description:&#xA;  Deploy Runi workers and slices to a remote orchestration cluster.&#xA;&#xA;Usage:&#xA;  runi deploy --target k8s&#xA;&#xA;Flags:&#xA;  --target      Target platform (k8s, bigmachine)&#xA;  --herd        Herd (namespace) to deploy into&#xA;  --dry-run     Simulate deployment without applying&#xA;  --confirm     Require manual confirmation for remote changes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-schedule---help&#34;&gt;&lt;code&gt;runi schedule --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Schedule a pipeline scenario for recurring execution.&#xA;&#xA;Usage:&#xA;  runi schedule --scenario &amp;lt;file&amp;gt; --cron &amp;#34;0 6 * * *&amp;#34;&#xA;&#xA;Flags:&#xA;  --scenario     DSL file&#xA;  --cron         Cron-style expression&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-audit---help&#34;&gt;&lt;code&gt;runi audit --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Show schema contract change history and approvals.&#xA;&#xA;Usage:&#xA;  runi audit --contract &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-restart---help&#34;&gt;&lt;code&gt;runi restart --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Restart a failed or incomplete pipeline run from its last checkpoint.&#xA;&#xA;Usage:&#xA;  runi restart --run-id &amp;lt;uuid&amp;gt;&#xA;&#xA;Flags:&#xA;  --run-id     Run ID to restart from&#xA;  --force      Ignore checkpoint and rerun from start&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-resume---help&#34;&gt;&lt;code&gt;runi resume --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Resume an interrupted or paused pipeline.&#xA;&#xA;Usage:&#xA;  runi resume --run-id &amp;lt;uuid&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-checkpoint---help&#34;&gt;&lt;code&gt;runi checkpoint --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Create a DAG state checkpoint for partial run recovery.&#xA;&#xA;Usage:&#xA;  runi checkpoint --scenario &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-comment---help&#34;&gt;&lt;code&gt;runi comment --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Leave inline comments for contracts or fields (used in review tools).&#xA;&#xA;Usage:&#xA;  runi comment --contract &amp;lt;file&amp;gt; --field &amp;lt;path&amp;gt; --note &amp;lt;text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-request-approval---help&#34;&gt;&lt;code&gt;runi request-approval --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Submit a contract for governance approval and audit.&#xA;&#xA;Usage:&#xA;  runi request-approval --contract &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-feedback---help&#34;&gt;&lt;code&gt;runi feedback --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Attach feedback note to a scenario feature for peer review.&#xA;&#xA;Usage:&#xA;  runi feedback --scenario &amp;lt;file&amp;gt; --note &amp;lt;text&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-redact---help&#34;&gt;&lt;code&gt;runi redact --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Automatically redact fields marked pii:&amp;#34;true&amp;#34; in a contract schema.&#xA;&#xA;Usage:&#xA;  runi redact --contract &amp;lt;file&amp;gt; --out &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-escrow---help&#34;&gt;&lt;code&gt;runi escrow --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Encrypt and store output data for delayed release or approval.&#xA;&#xA;Usage:&#xA;  runi escrow --run-id &amp;lt;uuid&amp;gt; --out &amp;lt;vault.json&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-anonymize---help&#34;&gt;&lt;code&gt;runi anonymize --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Create a non-sensitive version of input using faker + tags.&#xA;&#xA;Usage:&#xA;  runi anonymize --input &amp;lt;file&amp;gt; --contract &amp;lt;file&amp;gt; --out &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-trigger---help&#34;&gt;&lt;code&gt;runi trigger --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Define an event trigger for this scenario.&#xA;&#xA;Usage:&#xA;  runi trigger --scenario &amp;lt;file&amp;gt; --on webhook|s3|pubsub&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-listen---help&#34;&gt;&lt;code&gt;runi listen --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Start a listener to monitor incoming event and dispatch pipeline.&#xA;&#xA;Usage:&#xA;  runi listen --event &amp;lt;type&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-subscribe---help&#34;&gt;&lt;code&gt;runi subscribe --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Subscribe to a streaming topic or channel with offset tracking.&#xA;&#xA;Usage:&#xA;  runi subscribe --stream &amp;lt;topic&amp;gt; --window 5m&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-freeze---help&#34;&gt;&lt;code&gt;runi freeze --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Freeze contract + scenario versions with hashes for snapshot validation.&#xA;&#xA;Usage:&#xA;  runi freeze --scenario &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-archive---help&#34;&gt;&lt;code&gt;runi archive --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Archive old versions of scenarios and their runs by herd.&#xA;&#xA;Usage:&#xA;  runi archive --herd &amp;lt;name&amp;gt; --keep 3&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-retire---help&#34;&gt;&lt;code&gt;runi retire --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Retire a contract so it cannot be used in future scenarios.&#xA;&#xA;Usage:&#xA;  runi retire --contract &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-lineage-graph---help&#34;&gt;&lt;code&gt;runi lineage graph --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Export full DAG and contract lineage as GraphViz dot file.&#xA;&#xA;Usage:&#xA;  runi lineage graph --out lineage.dot&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-knowledge-export---help&#34;&gt;&lt;code&gt;runi knowledge export --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Export pipeline metadata using RDF serialization (Turtle/N-Triples).&#xA;&#xA;Usage:&#xA;  runi knowledge export --format turtle&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-query-lineage---help&#34;&gt;&lt;code&gt;runi query lineage --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Query lineage metadata using SQL-like syntax.&#xA;&#xA;Usage:&#xA;  runi query lineage --sql &amp;#34;SELECT * WHERE pii = true&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-openai-audit---help&#34;&gt;&lt;code&gt;runi openai audit --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Use an LLM to summarize contract diffs or suggest field comments.&#xA;&#xA;Usage:&#xA;  runi openai audit --contract &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-sandbox---help&#34;&gt;&lt;code&gt;runi sandbox --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Execute scenario in a secure ephemeral environment.&#xA;&#xA;Usage:&#xA;  runi sandbox --scenario &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-simulate---help&#34;&gt;&lt;code&gt;runi simulate --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Replay input data as a stream window to test stateful logic.&#xA;&#xA;Usage:&#xA;  runi simulate --input &amp;lt;file&amp;gt; --window 5m&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;runi-mint-token---help&#34;&gt;&lt;code&gt;runi mint-token --help&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Generate a short-lived JWT for scoped access by herd or scenario.&#xA;&#xA;Usage:&#xA;  runi mint-token --herd finance --role analyst --ttl 5m&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-best-practices&#34;&gt;üß† Best Practices&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;‚úÖ Describe what the command &lt;strong&gt;does&lt;/strong&gt;, not how it&amp;rsquo;s implemented&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Include at least 1 usage example&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Use consistent flags: &lt;code&gt;--scenario&lt;/code&gt;, &lt;code&gt;--contract&lt;/code&gt;, &lt;code&gt;--out&lt;/code&gt;, &lt;code&gt;--herd&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Provide guidance for &lt;code&gt;--dry-run&lt;/code&gt;, &lt;code&gt;--verbose&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;‚úÖ Include multi-step examples if command touches multiple files&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/components/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/components/</guid>
      <description>&lt;h1 id=&#34;runink-component-reference&#34;&gt;Runink Component Reference&lt;/h1&gt;&#xA;&lt;p&gt;This document describes each component of the Runink architecture, providing clear definitions, roles, and interactions within the overall system.&lt;/p&gt;&#xA;&lt;img src=&#34;./images/components.png&#34; width=&#34;680&#34;/&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;-runink-cli&#34;&gt;‚öôÔ∏è Runink CLI&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Role: Developer interface for scaffolding, testing, and running pipelines.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;The Runink CLI (&lt;code&gt;runi&lt;/code&gt;)&lt;/strong&gt; is the developer-first control surface for the entire data lifecycle ‚Äî from contracts and pipelines to tests, observability, and deployment. It acts as the &lt;strong&gt;orchestration layer for humans&lt;/strong&gt;, offering a simple, scriptable, and powerful interface for everything Runink can do.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/contributing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/contributing/</guid>
      <description>&lt;h1 id=&#34;-contributing-to-runink&#34;&gt;ü§ù Contributing to Runink&lt;/h1&gt;&#xA;&lt;p&gt;Welcome, and thank you for your interest in contributing to &lt;strong&gt;Runink&lt;/strong&gt; ‚Äî the data platform that makes pipelines safe, expressive, and composable. Whether you&amp;rsquo;re fixing bugs, improving documentation, writing tests, or building new features, your help makes Runink better for everyone.&lt;/p&gt;&#xA;&lt;p&gt;We‚Äôre excited to have you here! üöÄ&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-quick-start&#34;&gt;üß≠ Quick Start&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Fork the repository&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Clone your fork&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/your-username/runink.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd runink&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Install Go (1.21+)&lt;/strong&gt; and required tools&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Set up your environment&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make install-tools&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;make setup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;Start hacking&lt;/strong&gt; üöß&lt;br&gt;&#xA;Use the CLI or REPL to run tests and iterate locally:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runink init test-pipeline&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runink compile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runink test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-project-structure&#34;&gt;üìÇ Project Structure&lt;/h2&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s where to plug in:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/data-lineage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/data-lineage/</guid>
      <description>&lt;h1 id=&#34;data-lineage--metadata-tracking--runink&#34;&gt;Data Lineage &amp;amp; Metadata Tracking ‚Äì Runink&lt;/h1&gt;&#xA;&lt;p&gt;Runink pipelines are designed to be fully &lt;strong&gt;traceable&lt;/strong&gt;, &lt;strong&gt;auditable&lt;/strong&gt;, and &lt;strong&gt;schema-aware&lt;/strong&gt;. With built-in lineage support, every pipeline can generate:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Visual DAGs of data flow and dependencies&lt;/li&gt;&#xA;&lt;li&gt;Metadata snapshots with schema versions and field hashes&lt;/li&gt;&#xA;&lt;li&gt;Run-level logs for audit, debugging, and compliance&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This guide walks through how Runink enables robust &lt;strong&gt;data observability&lt;/strong&gt; and &lt;strong&gt;governance by default&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-what-is-data-lineage&#34;&gt;üîç What Is Data Lineage?&lt;/h2&gt;&#xA;&lt;p&gt;Lineage describes where your data came from, what happened to it, and where it went.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/feature-dsl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/feature-dsl/</guid>
      <description>&lt;h1 id=&#34;advanced-feature-dsl-syntax--runink&#34;&gt;Advanced Feature DSL Syntax ‚Äì Runink&lt;/h1&gt;&#xA;&lt;p&gt;Runink uses &lt;code&gt;.dsl&lt;/code&gt; files with a human-friendly DSL (Domain-Specific Language) inspired by BDD and Gherkin. These files define declarative data pipelines using structured steps, annotations, and contract references.&lt;/p&gt;&#xA;&lt;p&gt;This guide explores advanced syntax available for real-world data use cases including streaming, branching, conditionals, role enforcement, and metadata tagging.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-anatomy-of-a-dsl-file&#34;&gt;üìå Anatomy of a &lt;code&gt;.dsl&lt;/code&gt; File&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-gherkin&#34; data-lang=&#34;gherkin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Feature:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; High-value customer segmentation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@module(layer=&amp;#34;bronze&amp;#34;, domain=)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Scenario:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; Normalize Bronze Layer Product Data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @source(&amp;#34;json://testdata/input/products_feed.json&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;AddIngestMetadata&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;TagMissingFields&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @sink(&amp;#34;json://bronze/products_bronze.json&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  Given &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;the contract: contracts/products_raw.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;When &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;data is received from the vendor feed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Then &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;the ingestion timestamp should be added&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;missing required fields (sku, name, price) should be tagged&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Do &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;log metadata for every record&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Scenario: Silver Layer - Normalize and Standardize&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;@module(layer=&amp;#34;silver&amp;#34;,&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; domain=)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Scenario:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; Standardize Product Schema&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @source(&amp;#34;json://bronze/products_bronze.json&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;TrimProductNames&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;StandardizeCurrency&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;FixEmptyDescriptions&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @sink(&amp;#34;json://silver/products_silver.json&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  Given &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;the contract: contracts/products_normalized.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;When &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;records contain inconsistent formatting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Then &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;product names should be trimmed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currencies should default to USD if missing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;empty descriptions replaced with a default message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Do &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;emit standardized and validated output&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## Scenario: Gold Layer - Curate for Analytics &amp;amp; Governance&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;@module(layer=&amp;#34;gold&amp;#34;,&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; domain=)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Scenario:&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt; Enrich and Curate Product Catalog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @source(&amp;#34;json://silver/products_silver.json&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;GroupVariantsByFamily&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;EnrichWithCategoryLTV&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @step(&amp;#34;DetectDiscontinuedItems&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  @sink(&amp;#34;json://gold/products_curated.json&amp;#34;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  Given &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;the contract: contracts/products_curated.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;When &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;normalized product data is ready&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Then &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;variants should be grouped by SKU family&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;categories should have a calculated LTV score&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;And &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;discontinued items should be flagged by description&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Do &lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;finalize product output with metadata for BI usage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-iterative-scenarios&#34;&gt;üîÅ Iterative Scenarios&lt;/h2&gt;&#xA;&lt;p&gt;Use multiple &lt;code&gt;Scenario&lt;/code&gt; blocks per pipeline variant:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/getting_started/</guid>
      <description>&lt;h1 id=&#34;getting-started-with-runink&#34;&gt;Getting Started with Runink&lt;/h1&gt;&#xA;&lt;p&gt;Welcome to &lt;strong&gt;Runink&lt;/strong&gt;! This quick-start guide will help you get up and running with Runink to effortlessly build, test, and run data pipelines.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-1-installation&#34;&gt;üöÄ &lt;strong&gt;1. Installation&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Make sure you have Go installed (v1.20 or later). Then install Runink:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go install github.com/runink/runink@latest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ensure &lt;code&gt;$GOPATH/bin&lt;/code&gt; is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-2-initialize-your-project&#34;&gt;üõ† &lt;strong&gt;2. Initialize Your Project&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Create a new Runink project in seconds:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runink init myproject&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd myproject&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command generates:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/glossary/</guid>
      <description>&lt;h1 id=&#34;runink-glossary&#34;&gt;Runink Glossary&lt;/h1&gt;&#xA;&lt;p&gt;This glossary defines key terms, acronyms, and concepts used throughout the Runink documentation and codebase.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;dsl-file&#34;&gt;.dsl File&lt;/h3&gt;&#xA;&lt;p&gt;A human-readable file written in Gherkin syntax used to describe a data pipeline scenario using Given/When/Then structure and tags like @source, @step, and @sink.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;bdd-behavior-driven-development&#34;&gt;BDD (Behavior-Driven Development)&lt;/h3&gt;&#xA;&lt;p&gt;A software development approach that describes application behavior in plain language, often used with .dsl files.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;golden-file&#34;&gt;Golden File&lt;/h3&gt;&#xA;&lt;p&gt;A snapshot of the expected output from a pipeline or transformation, used to assert correctness in automated tests.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/roadmap/</guid>
      <description>&lt;h1 id=&#34;-runink-roadmap&#34;&gt;üó∫Ô∏è Runink Roadmap&lt;/h1&gt;&#xA;&lt;p&gt;Welcome to the official &lt;strong&gt;Runink Roadmap&lt;/strong&gt; ‚Äî our evolving guide to what we&amp;rsquo;re building, where we‚Äôre headed, and how you can get involved.&lt;/p&gt;&#xA;&lt;p&gt;Runink is built on the belief that modern data platforms should be &lt;strong&gt;safe by default&lt;/strong&gt;, &lt;strong&gt;composable by design&lt;/strong&gt;, and &lt;strong&gt;collaborative at scale&lt;/strong&gt;. This roadmap reflects our commitment to transparency, community-driven development, and rapid iteration.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-roadmap-themes&#34;&gt;üß© Roadmap Themes&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Theme&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Composable Pipelines&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Make it easy to build, reuse, and test pipeline steps across teams and domains.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Secure &amp;amp; Compliant by Default&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Tighten RBAC, data contracts, and observability for enterprise-grade governance.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;DevX &amp;amp; Developer Productivity&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Empower devs with a powerful CLI, REPL, codegen, and rapid iteration loops.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Streaming-First DataOps&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Advance real-time use cases with backpressure-safe, contract-aware streaming.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;Interoperability &amp;amp; Ecosystem&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Play well with FDC3, CDM, OpenLineage, Kafka, Snowflake, and more.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-current-focus-q2-2025&#34;&gt;üß≠ Current Focus (Q2 2025)&lt;/h2&gt;&#xA;&lt;p&gt;These items are in active development or early testing:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/runink_quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/runink_quickstart/</guid>
      <description>&lt;h1 id=&#34;-runink-quickstart-cdm-trade-pipeline&#34;&gt;üöÄ Runink Quickstart: CDM Trade Pipeline&lt;/h1&gt;&#xA;&lt;p&gt;This example shows how to define, test, apply, and run a declarative data pipeline using Runink.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-prerequisites&#34;&gt;üõ†Ô∏è Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Ensure you have:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A &lt;code&gt;.dsl&lt;/code&gt; scenario: &lt;code&gt;features/cdm_trade/trade_cdm.dsl&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;A Go contract file: &lt;code&gt;contracts/trade_cdm_multi.go&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Golden test files: &lt;code&gt;golden/cdm_trade/&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Sample input data: &lt;code&gt;golden/cdm_trade/input.json&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Our example presents the following:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-plaitext&#34; data-lang=&#34;plaitext&#34;&gt;Kafka (raw)&#xA;   ‚Üì DecodeCDMEvents&#xA;   ‚Üí sf://control.decoded_cdm_events&#xA;&#xA;   ‚Üì ValidateLifecycle&#xA;     ‚îú‚îÄ‚Üí sf://control.invalid_cdm_events (if !valid)&#xA;     ‚îî‚îÄ‚Üí TagWithFDC3Context&#xA;&#xA;    ‚Üì&#xA;         sf://cdm.validated_trade_events&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-example-flow&#34;&gt;üí° Example Flow&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Create a secure namespace (herd)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runi herd create finance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run the pipeline in test mode against golden test files&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runi test &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --scenario features/cdm_trade/cdm_trade.dsl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --golden golden/cdm_trade &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --herd finance&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compile + apply the DAG&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runi apply &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --scenario features/trade_cdm.dsl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --contract contracts/cdm_trade/trade_cdm_multi.go &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --herd finance &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --out dags/cdm_trade/trade_cdm_dag.go&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Execute the pipeline with test input&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;runi run &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --scenario features/cdm_trade/trade_cdm.dsl &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --herd finance &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --input golden/cdm_trade/input.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-inspect-pipeline-execution&#34;&gt;üìä Inspect Pipeline Execution&lt;/h2&gt;&#xA;&lt;p&gt;After running, inspect the pipeline using:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/schema-contracts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/schema-contracts/</guid>
      <description>&lt;h1 id=&#34;schema--contract-management--runink&#34;&gt;Schema &amp;amp; Contract Management ‚Äì Runink&lt;/h1&gt;&#xA;&lt;p&gt;Runink enables &lt;strong&gt;data contracts&lt;/strong&gt; as native Go structs ‚Äî giving you strong typing, version tracking, schema validation, and backward compatibility across pipelines.&lt;/p&gt;&#xA;&lt;p&gt;This guide shows how to define, version, test, and enforce schema contracts in your pipelines.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;-what-is-a-contract&#34;&gt;üì¶ What Is a Contract?&lt;/h2&gt;&#xA;&lt;p&gt;A contract in Runink is a schema definition used to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Validate incoming and outgoing data&lt;/li&gt;&#xA;&lt;li&gt;Detect schema drift&lt;/li&gt;&#xA;&lt;li&gt;Provide PII and RBAC tagging&lt;/li&gt;&#xA;&lt;li&gt;Drive pipeline generation and testing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Contracts are generated from Go structs annotated with tags.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/security/</guid>
      <description>&lt;h2 id=&#34;supported-versions&#34;&gt;Supported Versions&lt;/h2&gt;&#xA;&lt;p&gt;We currently support the latest major release of pipetool. Older versions may not receive security updates or patches.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;reporting-a-vulnerability&#34;&gt;Reporting a Vulnerability&lt;/h2&gt;&#xA;&lt;p&gt;If you discover a security vulnerability, please do not open a public issue.&lt;/p&gt;&#xA;&lt;p&gt;Instead, contact us directly:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Email: &lt;a href=&#34;mailto:security@yourdomain.org&#34;&gt;security@yourdomain.org&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;PGP Key:&lt;a href=&#34;https://yourdomain.org/pgp.key&#34;&gt; https://yourdomain.org/pgp.key&lt;/a&gt; (optional)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We aim to respond to all security reports within 5 business days. All disclosures will be handled confidentially and professionally.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;disclosure-process&#34;&gt;Disclosure Process&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Vulnerability reported via email&lt;/li&gt;&#xA;&lt;li&gt;Maintainers investigate and validate the issue&lt;/li&gt;&#xA;&lt;li&gt;A patch is prepared and tested privately&lt;/li&gt;&#xA;&lt;li&gt;Coordinated disclosure timeline is agreed upon with reporter&lt;/li&gt;&#xA;&lt;li&gt;Advisory + patched release are published&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;hall-of-fame&#34;&gt;Hall of Fame&lt;/h2&gt;&#xA;&lt;p&gt;We may credit contributors who report valid vulnerabilities in our release notes, changelogs, or SECURITY.md ‚Äî with consent.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
